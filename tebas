#!/usr/bin/env bash

#
# Copyright (c) 2017 Jose Manuel Sanchez Madrid. This file is licensed under MIT license. See file LICENSE for details.
#

#Helper functions
function die()
{
	if [ -n "$1" ]
	then
		echo "$1" >&2
	fi
	exit 1
}
function pass()
{
	exit 0
}
function fail()
{
	if [ -n "$1" ]
	then
		echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${CURRENT_TEST} - "
		echo "$1"
	fi
	exit 1
}
function assert()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	if ! "$@"
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertTrue()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	if ! [ "$@" ]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertStrEq()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	test -v "$1" || exit 2
	test -v "$2" || exit 2
	if ! [ "${!1}" = "${!2}" ]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertStrNotEq()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	test -v "$1" || exit 2
	test -v "$2" || exit 2
	if ! [ "${!1}" != "${!2}" ]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertIntEq()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	test -v "$1" || exit 2
	test -v "$2" || exit 2
	if ! [ "${!1}" -eq "${!2}" ]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertIntNotEq()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	test -v "$1" || exit 2
	test -v "$2" || exit 2
	if ! [ "${!1}" -ne "${!2}" ]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertReMatch()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	if ! [[ ${1} =~ ${2} ]]
	then
		test -n "${message}" && logErr "${message}" || true
		exit 1
	fi
}
function assertReNotMatch()
{
	local message=''
	if [ "$1" = "-m" ]
	then
		shift
		message="$1"
		shift
	fi
	local ret  # 0 matched, 1 not matched, 2 malformed regex
	[[ ${1} =~ ${2} ]] && ret=$? || ret=$?
	if [ "${ret}" -ne 1 ]
	then
		test -n "${message}" && logErr "${message}"
		exit 1
	fi
}
function assertCmd()
{
	# Parse options
	local opts="$( getopt -o o:e:r:nm:w -l output,error,return:ignore-failed-exec,message,what -n "assertCmd" -- "$@" || exit 2)"
	eval set -- "${opts}"
	local runCmdOpts=""
	local -i ignoreFailedExec=1
	local message=""
	local -i displayWhat=1
	while [ -n "$1" ]
	do
		case "$1" in
			(-o|--output)
				shift
				local expectedOutput="$1"
				local resultOutput=""
				runCmdOpts+=" -o resultOutput"
				;;
			(-e|--error)
				shift
				local expectedError="$1"
				local resultError=""
				runCmdOpts+=" -e resultError"
				;;
			(-r|--return)
				shift
				local expectedReturn="$1"
				local resultReturn=""
				runCmdOpts+=" -r resultReturn"
				;;
			(-n|--ignore-failed-exec)
				ignoreFailedExec=0
				;;
			(-m|--message)
				shift
				message="$1"
				;;
			(-w|--what)
				displayWhat=0
				;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done
	local optOutMessage=""
	local optErrMessage=""
	local optRetMessage=""
	local NotExecMessage=""
	local NotFoundMessage=""
	if [ "${displayWhat}" -eq 0 ]
	then
		optOutMessage="assertCmd: Command's output does not match expected output for '$@'"
		optErrMessage="assertCmd: Command's error does not match expected error for ''$@'"
		optRetMessage="assertCmd: Command's returned status does not match the expected for '$@'"
		NotExecMessage="assertCmd: Command is not executable '$@'"
		NotFoundMessage="assertCmd: Command can not be found '$@'"
	fi
	if [ -n "${message}" ]
	then
		optOutMessage="${message}"
		optErrMessage="${message}"
		optRetMessage="${message}"
		NotExecMessage="${message}"
		NotFoundMessage="${message}"
	fi

	# Execute
	local ret
	runCmd ${runCmdOpts} "$@" && ret=$? || ret=?

	# Check resuls
	if [ "${ignoreFailedExec}" -ne "0" ] && [ "${ret}" -eq 126 ]
	then
		test -n "${NotExecMessage}" && logErr "${NotExecMessage}" || true
		exit 126
	fi
	if [ "${ignoreFailedExec}" -ne "0" ] && [ "${ret}" -eq 127 ]
	then
		test -n "${NotFoundMessage}" && logErr "${NotFoundMessage}" || true
		exit 127
	fi
	test -v expectedReturn && assertIntEq -m "${optRetMessage}" resultReturn expectedReturn || true
	test -v expectedOutput && assertStrEq -m "${optOutMessage}" resultOutput expectedOutput || true
	test -v expectedError  && assertStrEq -m "${optErrMessage}" resultError  expectedError  || true
	return 0
}
function logInfo()
{
	echo -ne "[ ${LIGHT_BLUE}INFO${NOCOLOR}  ] ${CURRENT_TEST} - "
	echo "$1"
}
function logWarn()
{
	echo -ne "[${YELLOW}WARNING${NOCOLOR}] ${CURRENT_TEST} - "
	echo "$1"
}
function logErr()
{
	echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${CURRENT_TEST} - "
	echo "$1"
}
function runCmd()
{
	# Parse options
	local opts
	opts="$( getopt -o o:e:r: -l output,error,return: -n "runCmd" -- "$@" || return 2)"
	eval set -- "${opts}"
	while [ -n "$1" ]
	do
		case "$1" in
			(-o|--output) shift; declare -n outvar="$1" ;;
			(-e|--error)  shift; declare -n errvar="$1" ;;
			(-r|--return) shift; declare -n retvar="$1" ;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done

	# Prepare execution
	if [ -R outvar ]
	then
		local outfile
		outfile="$(mktemp || return 3)"
	fi
	if [ -R errvar ]
	then
		local errfile
		errfile="$(mktemp || return 3)"
	fi

	# Execute
	local retval
	"$@" 1>${outfile:-/dev/stdout} 2>${errfile:-/dev/stderr} && retval=$? || retval=$?

	# Return data and cleanup
	test -R retvar && retvar=${retval} || true
	test -R outvar && outvar="$(cat ${outfile})" && rm -f "${outfile}" || true
	test -R errvar && errvar="$(cat ${errfile})" && rm -f "${errfile}" || true
	return ${retval}
}
#Annotations
function @description
{
	:
}
function @shouldFail
{
	:
}
function @withSetUp
{
	:
}
function @withTearDown()
{
	:
}
function @withCleanUp()
{
	:
}

#core functions
function tebasPrintHelp()
{
	echo "Tebas is a test framework for Bash shell scripts"
	echo
	echo "usage: tebas [-v|--verbose] [-t|--tests testname1,testname2,...] <filename>"
	echo "       tebas -h|--help"
	echo
	echo " Arguments:"
	echo "   <filename>: file with the test to execute."
	echo
	echo " Options:"
	echo "   -h, --help: show this message."
	echo "   -v, --verbose: Increases verbosity level. It can be used more than once to get more verbose output."
	echo "                  With '-v' successful test are also displayed after execution."
	echo "                  With '-vv' tests stdout and stderr are not captured and are displayed as usual. "
	echo "                  With '-vvv fixtures and tests code are run with xtrace option enabled (set -x)"
	echo "   -t, --tests testname1,testname2,... : Run only the selected tests."
}
function tebasParseOptions()
{
	#Options as global variables
	declare -g -i tebasOptVerbosity=0
	declare -g tebasOptTestsToRun=""
	declare -g tebasArgTestfile=""

	local opts="$( getopt -o vht: -l verbose,help,tests: -n "$(basename $0)" -- "$@" || exit 1)"
	eval set -- "${opts}"
	while [ -n "$1" ]
	do
		case "$1" in
			(-v|--verbose)   ((tebasOptVerbosity++)) ;;
			(-h|--help)      tebasPrintHelp; exit 0 ;;
			(-t|--tests)   shift; tebasOptTestsToRun="${1//,/$'\n'}" ;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done
	tebasArgTestfile="$1"
}
function tebasRunFunction()
{
	local notrace=1
	if [ "$1" = "-n" ]
	then
		notrace=0
		shift
	fi
	local returned
	if [ "${tebasOptVerbosity}" -ge 2 ]
	then
		[ "${tebasOptVerbosity}" -ge 3 ] && [ "${notrace}" -ne 0 ] && set -x || true

		"$@" && returned=$? || returned=$?
	else
		"$@" >/dev/null 2>&1  && returned=$? || returned=$?
	fi
	set +x
	return ${returned}
}

function tebasSetupColors()
{
	#if output is a terminal use colors
	if [ -t 1 ]
	then
		declare -gr NOCOLOR='\033[0m'
		declare -gr RED='\033[0;31m'
		declare -gr GREEN='\033[32m'
		declare -gr YELLOW='\033[33m'
		declare -gr BLUE='\033[34m'
		declare -gr LIGHT_RED='\033[91m'
		declare -gr LIGHT_BLUE='\033[94m'
	else
		declare -gr NOCOLOR=''
		declare -gr RED=''
		declare -gr GREEN=''
		declare -gr YELLOW=''
		declare -gr BLUE=''
		declare -gr LIGTH_RED=''
		declare -gr LIGTH_BLUE=''
	fi
}
function tebasOnTestExit()
{
	local tebasTestTeardownFunction="$1"
	local tebasTestCleanUpFunction="$2"

	if declare -F "${tebasTestTeardownFunction}" >/dev/null
	then
		if ! tebasRunFunction "${tebasTestTeardownFunction}"
		then
			tebasRunFunction -n logWarn "Failed ${tebasTestTeardownFunction}."
		fi
	fi
	if declare -F "${tebasTestCleanUpFunction}" >/dev/null
	then
		if ! tebasRunFunction "${tebasTestCleanUpFunction}"
		then
			tebasRunFunction -n logWarn "Failed ${tebasTestCleanUpFunction}."
		fi fi
}
function tebasGetTestAnnotations()
{
	local functionName="$1"

	while read line
	do
		if [[ ${line} =~ ^[[:blank:]]*\@([a-zA-Z0-9]+)([[:blank:]]+([^\#\;\'\"]*|\"[^\"]*\"|\'[^\']*\'))?([\s\;]*)$ ]]
		then
			local key="${BASH_REMATCH[1]%% }"
			local value="${BASH_REMATCH[3]%% }"
			value="${value## }"
			if [[ ${value} =~ ^\"([^\"]*)\"$ ]] || [[ ${value} =~ ^\'([^\']*)\'$ ]]
			then
				value="${BASH_REMATCH[1]}"
			fi
			echo "${key}=${value}"
		fi
	done <<< "$(declare -f "${functionName}")"
}
function tebasListHasKey()
{
	local targetKey="$1"
	local keyList="$2"
	local key
	local value

	while read line
	do

		IFS=\=  read key value <<< "${line}"
		if [ "${key}" = "${targetKey}" ]
		then
			echo "${value}"
			return 0
		fi
	done <<< "${keyList}"
	return 1
}

# main
function tebasMain()
{
	tebasParseOptions "$@"

	[ -z "${tebasArgTestfile}" ] && die "The argument 'filename' is mandatory. Run -h for usage help." || true
	[ ! -r "${tebasArgTestfile}" ] && die "Cant' read '${tebasArgTestfile}'. Does the file exists and is readable?" || true

	tebasSetupColors

	declare -i tebasSucceededTests=0
	declare -i tebasFailedTests=0

	source "${tebasArgTestfile}"

	if [ -z "${tebasOptTestsToRun}" ]
	then
		tebasOptTestsToRun="$(declare -F | grep "^declare -f test" | cut -d\   -f3 || true)"
	fi
	local tebasTestSetupFunction="${TEBAS_DEFAULT_SETUP:-setUp}"
	local tebasTestTeardownFunction="${TEBAS_DEFAULT_TEARDOWN:-tearDown}"
	local tebasTestSetupOnceFunction="${TEBAS_DEFAULT_SETUPONCE:-setUpOnce}"
	local tebasTestTeardownOnceFunction="${TEBAS_DEFAULT_TEARDOWNONCE:-tearDownOnce}"
	local tebasTestCleanUpFunction="${TEBAS_DEFAULT_CLEANUP:-cleanUp}"
	local tebasTestCleanUpOnceFunction="${TEBAS_DEFAULT_CLEANUPONCE:-cleanUpOnce}"
	# run setUpOnce
	declare -g CURRENT_TEST=''
	if declare -F "${tebasTestSetupOnceFunction}" >/dev/null
	then
		CURRENT_TEST="${tebasTestSetupOnceFunction}"
		if ! tebasRunFunction "${tebasTestSetupOnceFunction}"
		then
			echo "Ran 0 tests"
			echo -e "${RED}ERROR ${tebasTestSetupOnceFunction} failed. Test suit aborted.${NOCOLOR}"
			if declare -F "${tebasTestCleanUpOnceFunction}" >/dev/null
			then
				CURRENT_TEST="${tebasTestCleanUpOnceFunction}"
				if ! tebasRunFunction "${tebasTestCleanUpOnceFunction}"
				then
					echo -e "${YELLOW}WARNING ${tebasTestCleanUpOnceFunction} failed.${NOCOLOR}"
				fi
			fi
			exit 1
		fi
	fi
	# Run tests loop
	for tebasTestFunction in ${tebasOptTestsToRun}
	do
		# Process annotations
		local tebasTestAnnotations="$(tebasGetTestAnnotations "${tebasTestFunction}")"
		local tebasTestDescription="$(tebasListHasKey description "${tebasTestAnnotations}" || true)"
		test -n "${tebasTestDescription}" && tebasTestDescription=" - ${tebasTestDescription}" || true
		tebasTestSetupFunction="$(tebasListHasKey withSetUp "${tebasTestAnnotations}" || true)"
		test -z "${tebasTestSetupFunction}" && tebasTestSetupFunction="${TEBAS_DEFAULT_SETUP:-setUp}" || true
		tebasTestTeardownFunction="$(tebasListHasKey withTearDown "${tebasTestAnnotations}" || true)"
		test -z "${tebasTestTeardownFunction}" && tebasTestTeardownFunction="${TEBAS_DEFAULT_TEARDOWN:-tearDown}" || true
		tebasTestCleanUpFunction="$(tebasListHasKey withCleanUp "${tebasTestAnnotations}" || true)"
		test -z "${tebasTestCleanUpFunction}" && tebasTestCleanUpFunction="${TEBAS_DEFAULT_CLEANUP:-cleanUp}" || true
		# test subshell
		local result
		(
			CURRENT_TEST="${tebasTestFunction}"

			# run setUp and register cleanUp and tearDown
			trap "set +x;tebasOnTestExit '' '${tebasTestCleanUpFunction}'" EXIT
			if declare -F "${tebasTestSetupFunction}" >/dev/null
			then
				if ! tebasRunFunction "${tebasTestSetupFunction}"
				then
					tebasRunFunction -n fail "Failed ${tebasTestSetupFunction}. Test aborted."
				fi
			fi
			trap "set +x;tebasOnTestExit '${tebasTestTeardownFunction}' '${tebasTestCleanUpFunction}'" EXIT

			# run test
			tebasRunFunction "${tebasTestFunction}" && return $? || return $?
		) && result=$? || result=$?
		tebasListHasKey "shouldFail" "${tebasTestAnnotations}" >/dev/null  && result="$(( ! result ))" || true
		# display test result
		if [ 0 -eq "${result}" ]
		then
			((tebasSucceededTests++)) || true
			[ ${tebasOptVerbosity} -gt 0 ] && echo -e "[${GREEN}SUCCESS${NOCOLOR}] ${tebasTestFunction}${tebasTestDescription}" || true
		else
			((tebasFailedTests++)) || true
			echo -e "[${RED}FAILED${NOCOLOR} ] ${tebasTestFunction}${tebasTestDescription}"
		fi
	done
	# run tearDownOnce
	if declare -F "${tebasTestTeardownOnceFunction}" >/dev/null
	then
		CURRENT_TEST="${tebasTestTeardownOnceFunction}"
		if ! tebasRunFunction "${tebasTestTeardownOnceFunction}"
		then
			tebasRunFunction -n logWarn "Failed ${tebasTestTeardownOnceFunction}."
		fi
	fi
	# run cleanUpOnce
	if declare -F "${tebasTestCleanUpOnceFunction}" >/dev/null
	then
		CURRENT_TEST="${tebasTestCleanUpOnceFunction}"
		if ! tebasRunFunction "${tebasTestCleanUpOnceFunction}"
		then
			tebasRunFunction -n logWarn "Failed ${tebasTestCleanUpOnceFunction}."
		fi
	fi
	# display summary
	if [ ${tebasOptVerbosity} -gt 0 ] || [ ${tebasFailedTests} -gt 0 ]
	then
		echo
		echo "----------------------------------------------------------------------"
		echo
	fi
	echo "Ran $((tebasSucceededTests + tebasFailedTests)) tests"
	echo
	if [ "${tebasFailedTests}" -gt 0 ]
	then
		echo -e "${RED}FAILED ${tebasFailedTests} tests${NOCOLOR}"
		exit 1
	else
		echo -e "${GREEN}OK${NOCOLOR}"
		exit 0
	fi
}

# run main
if [ "${BASH_SOURCE[0]}" = "$0" ]
then
	tebasMain "$@"
fi
