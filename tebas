#!/usr/bin/env bash

#
# Copyright (c) 2017 Jose Manuel Sanchez Madrid. This file is licensed under MIT license. See file LICENSE for details.
#

#Auxiliary functions
function die()
{
	if [ -n "$1" ]
	then
		echo "$1" >&2
	fi
	exit 1
}
function pass()
{
	exit 0
}
function fail()
{
	if [ -n "$1" ]
	then
		echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${FUNCNAME[1]} - "
		echo "$1"
	fi
	exit 1
}
function assert()
{
	if ! "$@"
	then
		exit 1
	fi
}
function assertTrue()
{
	if ! [ "$@" ]
	then
		exit 1
	fi
}
function logInfo()
{
	echo -ne "[ ${LIGHT_BLUE}INFO${NOCOLOR}  ] ${FUNCNAME[1]} - "
	echo "$1"
}
function logWarn()
{
	echo -ne "[${YELLOW}WARNING${NOCOLOR}] ${FUNCNAME[1]} - "
	echo "$1"
}
function logErr()
{
	echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${FUNCNAME[1]} - "
	echo "$1"
}

#core functions
function tebasPrintHelp()
{
	echo "Tebas is a test framework for Bash shell scripts"
	echo 
	echo "usage: tebas [-s|--nocapture] [-v|--verbose] [-x|--xtrace] <filename>"
	echo "       tebas <-h|--help>"
	echo
	echo " Arguments:"
	echo "   <filename>: file with the test to execute"
	echo
	echo " Options:"
	echo "   -h, --help: show this message"
	echo "   -s, --nocapture: prevent capturing the stdout and stderr output from the tests"
    echo "   -x, --xtrace: run fixtures and tests code with xtrace option enabled (set -x). Implies --nocapture."
	echo "   -v, --verbose: show the results of each test inmediately after it is executed"
}
function tebasParseOptions()
{
	#Options as global variables
	declare -g -i tebasOptNocapture=1
	declare -g -i tebasOptVerbose=1
	declare -g -i tebasOptXtrace=1
	declare -g tebasArgTestfile=""

	local opts="$( getopt -o svxh -l nocapture,verbose,xtrace,help -n "$(basename $0)" -- "$@" )"
	[ "$?" -ne 0 ] && exit 1
	eval set -- "${opts}"
	while [ -n "$1" ]
	do
		case "$1" in
			(-s|--nocapture) tebasOptNocapture=0 ;;
			(-v|--verbose)   tebasOptVerbose=0 ;;
			(-x|--xtrace)    tebasOptXtrace=0 ; tebasOptNocapture=0 ;;
			(-h|--help)      tebasPrintHelp; exit 0 ;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done
	tebasArgTestfile="$1"
}
function tebasRunFunction()
{
	local functionToRun="$1"
	if [ "${tebasOptNocapture}" -eq 0 ]
	then
		[ "${tebasOptXtrace}" -eq 0 ] && set -x
		${functionToRun}
	else
		${functionToRun} >/dev/null 2>&1
	fi
}

function tebasSetupColors()
{
	#if output is a terminal use colors
	if [ -t 1 ]
	then
		declare -gr NOCOLOR='\033[0m'
		declare -gr RED='\033[0;31m'
		declare -gr GREEN='\033[32m'
		declare -gr YELLOW='\033[33m'
		declare -gr BLUE='\033[34m'
		declare -gr LIGHT_RED='\033[91m'
		declare -gr LIGHT_BLUE='\033[94m'
	else
		declare -gr NOCOLOR=''
		declare -gr RED=''
		declare -gr GREEN=''
		declare -gr YELLOW=''
		declare -gr BLUE=''
		declare -gr LIGTH_RED=''
		declare -gr LIGTH_BLUE=''
	fi
}

#main
function tebasMain()
{
	tebasParseOptions "$@"
	
	[ -z "${tebasArgTestfile}" ] && die "The argument 'filename' is mandatory. Run -h for usage help."
	[ ! -r "${tebasArgTestfile}" ] && die "Cant' read '${tebasArgTestfile}'. Does the file exists and is readable?"

	tebasSetupColors
	
	declare -i successed=0
	declare -i failed=0
	
	source "${tebasArgTestfile}"
	for testfunc in $(declare -F | grep "^declare -f test" | cut -d\   -f3)
	do
		(
			if declare -F setUp >/dev/null
			then
				tebasRunFunction setUp
				set +x
			fi
			if declare -F tearDown >/dev/null
			then
				trap "tebasRunFunction tearDown" EXIT
			fi
	
			tebasRunFunction "${testfunc}"
		) 
		if [ 0 -eq "$?" ]
		then
			((successed++))
			[ ${tebasOptVerbose} -eq 0 ] && echo -e "[${GREEN}SUCCESS${NOCOLOR}] ${testfunc}"
		else
			((failed++))
			echo -e "[${RED}FAILED${NOCOLOR} ] ${testfunc}"
		fi
	done
	
	if [ ${tebasOptVerbose} -eq 0 ] || [ "${tebasOptNocapture}" -eq 0 ] || [ ${failed} -gt 0 ]
	then
		echo
		echo "----------------------------------------------------------------------"
		echo
	fi
	
	echo "Ran $((successed + failed)) tests"
	echo
	if [ "${failed}" -gt 0 ]
	then
		echo -e "${RED}FAILED ${failed} tests${NOCOLOR}"
		exit 1
	else
		echo -e "${GREEN}OK${NOCOLOR}"
		exit 0
	fi
}


if [ "${FUNCNAME[0]}" = "main" ]
then
	tebasMain $@
fi
