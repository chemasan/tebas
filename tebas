#!/usr/bin/env bash

#
# Copyright (c) 2017 Jose Manuel Sanchez Madrid. This file is licensed under MIT license. See file LICENSE for details.
#

#Helper functions
function die()
{
	if [ -n "$1" ]
	then
		echo "$1" >&2
	fi
	exit 1
}
function pass()
{
	exit 0
}
function fail()
{
	if [ -n "$1" ]
	then
		echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${FUNCNAME[1]} - "
		echo "$1"
	fi
	exit 1
}
function assert()
{
	if ! "$@"
	then
		exit 1
	fi
}
function assertTrue()
{
	if ! [ "$@" ]
	then
		exit 1
	fi
}
function assertStrEq()
{
	if ! [ "${!1}" = "${!2}" ]
	then
		exit 1
	fi
}
function assertStrNotEq()
{
	if ! [ "${!1}" != "${!2}" ]
	then
		exit 1
	fi
}
function assertIntEq()
{
	if ! [ "${!1}" -eq "${!2}" ]
	then
		exit 1
	fi
}
function assertIntNotEq()
{
	if ! [ "${!1}" -ne "${!2}" ]
	then
		exit 1
	fi
}
function assertReMatch()
{
	if ! [[ ${1} =~ ${2} ]]
	then
		exit 1
	fi
}
function assertReNotMatch()
{
	[[ ${1} =~ ${2} ]]
	local ret=$?  # 0 matched, 1 not matched, 2 malformed regex
	if [ "${ret}" -ne 1 ]
	then
		exit 1
	fi
}
function logInfo()
{
	echo -ne "[ ${LIGHT_BLUE}INFO${NOCOLOR}  ] ${FUNCNAME[1]} - "
	echo "$1"
}
function logWarn()
{
	echo -ne "[ ${YELLOW}WARNING${NOCOLOR}] ${FUNCNAME[1]} - "
	echo "$1"
}
function logErr()
{
	echo -ne "[ ${LIGHT_RED}ERROR${NOCOLOR} ] ${FUNCNAME[1]} - "
	echo "$1"
}
function runCmd()
{
	# Parse options
	local opts
	opts="$( getopt -o o:e:r: -l output,error,return: -n "runCmd" -- "$@" )"
	[ "$?" -ne 0 ] && return 2
	eval set -- "${opts}"
	while [ -n "$1" ]
	do
		case "$1" in
			(-o|--output) shift; declare -n outvar="$1" ;;
			(-e|--error)  shift; declare -n errvar="$1" ;;
			(-r|--return) shift; declare -n retvar="$1" ;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done

	# Prepare execution
	if [ -R outvar ]
	then
		local outfile
		outfile="$(mktemp)"
		[ "$?" -ne 0 ] && return 3
	fi
	if [ -R errvar ]
	then
		local errfile
		errfile="$(mktemp)"
		[ "$?" -ne 0 ] && return 3
	fi

	# Execute
	"$@" 1>${outfile:-/dev/stdout} 2>${errfile:-/dev/stderr}
	local retval=$?

	# Return data and cleanup
	test -R retvar && retvar=${retval}
	test -R outvar && outvar="$(cat ${outfile})" && rm -f "${outfile}"
	test -R errvar && errvar="$(cat ${errfile})" && rm -f "${errfile}"
	return ${retval}
}

#core functions
function tebasPrintHelp()
{
	echo "Tebas is a test framework for Bash shell scripts"
	echo
	echo "usage: tebas [-v|--verbose] [-t|--tests testname1,testname2,...] <filename>"
	echo "       tebas -h|--help"
	echo
	echo " Arguments:"
	echo "   <filename>: file with the test to execute."
	echo
	echo " Options:"
	echo "   -h, --help: show this message."
	echo "   -v, --verbose: Increases verbosity level. It can be used more than once to get more verbose output."
	echo "                  With '-v' successful test are also displayed after execution."
	echo "                  With '-vv' tests stdout and stderr are not captured and are displayed as usual. "
	echo "                  With '-vvv fixtures and tests code are run with xtrace option enabled (set -x)"
	echo "   -t, --tests testname1,testname2,... : Run only the selected tests."
}
function tebasParseOptions()
{
	#Options as global variables
	declare -g -i tebasOptVerbosity=0
	declare -g tebasOptTestsToRun=""
	declare -g tebasArgTestfile=""

	local opts="$( getopt -o vht: -l verbose,help,tests: -n "$(basename $0)" -- "$@" )"
	[ "$?" -ne 0 ] && exit 1
	eval set -- "${opts}"
	while [ -n "$1" ]
	do
		case "$1" in
			(-v|--verbose)   ((tebasOptVerbosity++)) ;;
			(-h|--help)      tebasPrintHelp; exit 0 ;;
			(-t|--tests)   shift; tebasOptTestsToRun="${1//,/$'\n'}" ;;
			(--) shift; break;;
			(*) break ;;
		esac
		shift
	done
	tebasArgTestfile="$1"
}
function tebasRunFunction()
{
	local functionToRun="$1"
	if [ "${tebasOptVerbosity}" -ge 2 ]
	then
		[ "${tebasOptVerbosity}" -ge 3 ] && set -x
		${functionToRun}
	else
		${functionToRun} >/dev/null 2>&1
	fi
}

function tebasSetupColors()
{
	#if output is a terminal use colors
	if [ -t 1 ]
	then
		declare -gr NOCOLOR='\033[0m'
		declare -gr RED='\033[0;31m'
		declare -gr GREEN='\033[32m'
		declare -gr YELLOW='\033[33m'
		declare -gr BLUE='\033[34m'
		declare -gr LIGHT_RED='\033[91m'
		declare -gr LIGHT_BLUE='\033[94m'
	else
		declare -gr NOCOLOR=''
		declare -gr RED=''
		declare -gr GREEN=''
		declare -gr YELLOW=''
		declare -gr BLUE=''
		declare -gr LIGTH_RED=''
		declare -gr LIGTH_BLUE=''
	fi
}

#main
function tebasMain()
{
	tebasParseOptions "$@"

	[ -z "${tebasArgTestfile}" ] && die "The argument 'filename' is mandatory. Run -h for usage help."
	[ ! -r "${tebasArgTestfile}" ] && die "Cant' read '${tebasArgTestfile}'. Does the file exists and is readable?"

	tebasSetupColors

	declare -i tebasSucceededTests=0
	declare -i tebasFailedTests=0

	source "${tebasArgTestfile}"

	if [ -z "${tebasOptTestsToRun}" ]
	then
		tebasOptTestsToRun="$(declare -F | grep "^declare -f test" | cut -d\   -f3)"
	fi
	local tebasTestSetupFunction="${TEBAS_DEFAULT_SETUP:-setUp}"
	local tebasTestTeardownFunction="${TEBAS_DEFAULT_TEARDOWN:-tearDown}"
	for tebasTestFunction in ${tebasOptTestsToRun}
	do
		(
			if declare -F "${tebasTestSetupFunction}" >/dev/null
			then
				tebasRunFunction "${tebasTestSetupFunction}"
				set +x
			fi
			if declare -F "${tebasTestTeardownFunction}" >/dev/null
			then
				trap "set +x;tebasRunFunction '${tebasTestTeardownFunction}'" EXIT
			fi

			tebasRunFunction "${tebasTestFunction}"
		)
		if [ 0 -eq "$?" ]
		then
			((tebasSucceededTests++))
			[ ${tebasOptVerbosity} -gt 0 ] && echo -e "[${GREEN}SUCCESS${NOCOLOR}] ${tebasTestFunction}"
		else
			((tebasFailedTests++))
			echo -e "[${RED}FAILED${NOCOLOR} ] ${tebasTestFunction}"
		fi
	done

	if [ ${tebasOptVerbosity} -gt 0 ] || [ ${tebasFailedTests} -gt 0 ]
	then
		echo
		echo "----------------------------------------------------------------------"
		echo
	fi

	echo "Ran $((tebasSucceededTests + tebasFailedTests)) tests"
	echo
	if [ "${tebasFailedTests}" -gt 0 ]
	then
		echo -e "${RED}FAILED ${tebasFailedTests} tests${NOCOLOR}"
		exit 1
	else
		echo -e "${GREEN}OK${NOCOLOR}"
		exit 0
	fi
}


if [ "${BASH_SOURCE[0]}" = "$0" ]
then
	tebasMain "$@"
fi
