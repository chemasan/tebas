#!/usr/bin/env bash

#
# Copyright (c) 2017 Jose Manuel Sanchez Madrid. This file is licensed under MIT license. See file LICENSE for details.
#

#Auxiliary functions
function die()
{
	if [ -n "$1" ]
	then
		echo "$1" >&2
	fi
	exit 1
}
function pass()
{
	exit 0
}
function fail()
{
	die "$@"
}
function assert()
{
	if ! "$@"
	then
		exit 1
	fi
}
function assertTrue()
{
	if ! [ "$@" ]
	then
		exit 1
	fi
}

#core functions
function printHelp()
{
	echo "Tebas is a test framework for Bash shell scripts"
	echo 
	echo "usage: tebas [-s|--nocapture] [-v|--verbose] <filename>"
	echo "       tebas <-h|--help>"
	echo
	echo " Arguments:"
	echo "   <filename>: file with the test to execute"
	echo
	echo " Options:"
	echo "   -h, --help: show this message"
	echo "   -s, --nocapture: prevent capturing the stdout and stderr output from the tests"
    echo "   -x, --xtrace: run fixtures and tests code with xtrace option enabled (set -x). Implies --nocapture."
	echo "   -v, --verbose: show the results of each test inmediately after it is executed"
}
function parseOptions()
{
	declare -g -i tebasOptNocapture=1
	declare -g -i tebasOptVerbose=1
	declare -g -i tebasOptXtrace=1
	declare -g tebasArgTestfile=""

	for parameter in "$@"
	do
		case ${parameter} in
			(-s|--tebasOptNocapture)
				tebasOptNocapture=0
			;;
			(-v|--tebasOptVerbose)
				tebasOptVerbose=0
			;;
			(-x|--xtrace)
				tebasOptXtrace=0
				tebasOptNocapture=0
			;;
			(-h|--help)
				printHelp
				exit 0
			;;
			(*)
				if [ "${parameter:0:1}" = "-" ]
				then
					die "unrecognized option '${parameter}'"
				fi
				tebasArgTestfile="${parameter}"
			;;
		esac
	
	done
}
function runFunction()
{
	local functionToRun="$1"
	if [ "${tebasOptNocapture}" -eq 0 ]
	then
		[ "${tebasOptXtrace}" -eq 0 ] && set -x
		${functionToRun}
	else
		${functionToRun} >/dev/null 2>&1
	fi
}

#main
function main()
{
	parseOptions "$@"
	
	[ -z "${tebasArgTestfile}" ] && die "The argument 'filename' is mandatory. Run -h for usage help."
	[ ! -r "${tebasArgTestfile}" ] && die "Cant' read '${tebasArgTestfile}'. Does the file exists and is readable?"
	
	#if output is a terminal use colors
	if [ -t 1 ]
	then
		declare -r NOCOLOR='\033[0m'
		declare -r RED='\033[0;31m'
		declare -r GREEN='\033[32m'
	else
		declare -r NOCOLOR=''
		declare -r RED=''
		declare -r GREEN=''
	fi
	
	
	declare -i successed=0
	declare -i failed=0
	declare -a failedTests
	
	source "${tebasArgTestfile}"
	for testfunc in $(declare -F | grep "^declare -f test" | cut -d\   -f3)
	do
		(
			if declare -F setup >/dev/null
			then
				runFunction setup
				set +x
			fi
			if declare -F teardown >/dev/null
			then
				trap "runFunction teardown" EXIT
			fi
	
			runFunction "${testfunc}"
		) 
		if [ 0 -eq "$?" ]
		then
			((successed++))
			[ ${tebasOptVerbose} -eq 0 ] && echo -e "[${GREEN}SUCCESS${NOCOLOR}] ${testfunc}"
		else
			((failed++))
			failedTests+=("${testfunc}")
			[ ${tebasOptVerbose} -eq 0 ] &&  echo -e "[${RED}FAILED${NOCOLOR} ] ${testfunc}"
		fi
	done
	
	if [ ${tebasOptVerbose} -eq 0 ] || [ "${tebasOptNocapture}" -eq 0 ]
	then
		echo
		echo "----------------------------------------------------------------------"
		echo
	fi
	
	echo "Ran $((successed + failed)) tests"
	echo
	if [ "${failed}" -gt 0 ]
	then
		echo -e "${RED}FAILED ${failed} tests${NOCOLOR}"
		for failedTest in "${failedTests[@]}"
		do
			echo " ${failedTest}"
		done
		exit 1
	else
		echo -e "${GREEN}OK${NOCOLOR}"
		exit 0
	fi
}

main $@
